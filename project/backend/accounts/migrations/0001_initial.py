# Generated by Django 4.2.7 on 2025-07-27 01:16

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=20)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('P', 'Prefer not to say')], max_length=1)),
                ('height', models.FloatField(blank=True, help_text='Height in centimeters', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)])),
                ('weight', models.FloatField(blank=True, help_text='Weight in kilograms', null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(500)])),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('cooking_level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced'), ('expert', 'Expert')], default='beginner', max_length=20)),
                ('family_size', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('notifications_enabled', models.BooleanField(default=True)),
                ('location_enabled', models.BooleanField(default=True)),
                ('offline_mode', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(default='üèÜ', max_length=10)),
                ('category', models.CharField(choices=[('cooking', 'Cooking'), ('planning', 'Meal Planning'), ('health', 'Health & Nutrition'), ('cultural', 'Cultural Explorer'), ('social', 'Social')], max_length=50)),
                ('points', models.PositiveIntegerField(default=10)),
                ('requirements', models.JSONField(default=dict, help_text='Requirements to unlock this achievement')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'achievements',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Allergy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('severity_level', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('life_threatening', 'Life Threatening')], default='moderate', max_length=20)),
                ('common_foods', models.TextField(blank=True, help_text='Comma-separated list of common foods containing this allergen')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': 'Allergies',
                'db_table': 'allergies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DietaryPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('allowed_foods', models.TextField(blank=True, help_text='Comma-separated list of allowed food categories')),
                ('restricted_foods', models.TextField(blank=True, help_text='Comma-separated list of restricted food categories')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'dietary_preferences',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='FitnessGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('target_calories_adjustment', models.IntegerField(default=0, help_text='Daily calorie adjustment for this goal (+/- calories)')),
                ('recommended_macros', models.JSONField(default=dict, help_text='Recommended macro ratios (protein, carbs, fat percentages)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'fitness_goals',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='HealthCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('dietary_restrictions', models.TextField(blank=True, help_text='Comma-separated list of dietary restrictions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'health_conditions',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('daily_calorie_target', models.PositiveIntegerField(blank=True, null=True)),
                ('daily_water_target', models.FloatField(blank=True, help_text='Daily water intake target in liters', null=True)),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary (little or no exercise)'), ('light', 'Lightly active (light exercise 1-3 days/week)'), ('moderate', 'Moderately active (moderate exercise 3-5 days/week)'), ('very', 'Very active (hard exercise 6-7 days/week)'), ('extra', 'Extra active (very hard exercise, physical job)')], default='moderate', max_length=20)),
                ('preferred_meal_times', models.JSONField(default=dict, help_text='Preferred times for breakfast, lunch, dinner')),
                ('favorite_cuisines', models.JSONField(default=list, help_text='List of favorite African cuisine regions')),
                ('disliked_ingredients', models.JSONField(default=list, help_text='List of ingredients the user dislikes')),
                ('onboarding_completed', models.BooleanField(default=False)),
                ('onboarding_completed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allergies', models.ManyToManyField(blank=True, to='accounts.allergy')),
                ('dietary_preferences', models.ManyToManyField(blank=True, to='accounts.dietarypreference')),
                ('fitness_goals', models.ManyToManyField(blank=True, to='accounts.fitnessgoal')),
                ('health_conditions', models.ManyToManyField(blank=True, to='accounts.healthcondition')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_profiles',
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earned_at', models.DateTimeField(auto_now_add=True)),
                ('progress', models.JSONField(default=dict, help_text='Progress towards achievement requirements')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_achievements',
                'ordering': ['-earned_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
    ]
